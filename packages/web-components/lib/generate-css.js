import { readdir, readFile, writeFile } from 'node:fs/promises';
import { join } from 'node:path';
import postcss from 'postcss';
import cssnano from 'cssnano';
import { plugins} from '../postcss.config.cjs';


const cssDir = join(process.cwd(), 'src', 'css');

// we need to generate three versions, since variables work everywhere,
// but globals and utilities need to be added to both the lightDOM and
// to each component (by adding it to their base element)
// Also, lit requires that we use the css tag to create a css template,
// so we need to extract the plain text to a string to use it in the 
// lightDOM CSS file

const variables = await readFile(join(cssDir, 'variables.css'), {encoding: 'utf-8'});

// TODO: investigate using css TTLs for each CSS file in utilities and compare for speed
const utilitiesPath = join(cssDir, 'utilities', 'index.css');
const utilities = (await postcss(plugins).process(await readFile(utilitiesPath, {encoding: 'utf-8'}), {from: utilitiesPath})).css;

const text = [variables, utilities].join('\n\n');
const result = await postcss(plugins).process(text, {from: utilitiesPath});

const distDir = join(process.cwd(), 'public');
await writeFile(join(distDir, 'fui.css'), result.css);

if (process.env.NODE_ENV === 'production') {
  const minified = await postcss([cssnano()]).process(result.css, {from: join(distDir, 'fui.css')});
  await writeFile(join(distDir, 'fui.min.css'), minified.css);
}

await writeFile(join(cssDir, 'utilities.css.js'), `
// AUTOGENERATED FILE, DO NOT EDIT
import { css } from 'lit';

export const utilityStyles = css\`
${result.css}
\`;`);